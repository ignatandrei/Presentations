@page "/weather"
@* @attribute [StreamRendering(true)] *@
@* @attribute [OutputCache(Duration = 5)] *@

@inject WeatherApiClient WeatherApi;

@inject IBlazorDownloadFileService BlazorDownloadFileService; 
<PageTitle>Weather or zip</PageTitle>

<h1>Weather or zip </h1>

<p>This component demonstrates showing data loaded from a backend API service.</p>

<p>Zip file </p>

<button class="btn btn-primary" @onclick="DownloadZippedText">Download zip</button>
<input type="text" @bind="InputValue" />

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private string InputValue { get; set; }= "Andrei";
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        forecasts = await WeatherApi.GetWeatherAsync();
    }

    private async void DownloadZippedText()
    {
        Console.WriteLine("start");
        string text = InputValue;
        
        var zippedBytes = await WeatherApi.GetZipFile(text);

        if (zippedBytes.Length > 0)
        {
            var fileName = "text.zip";
            await BlazorDownloadFileService.DownloadFileAsync(fileName, zippedBytes);
        }
        else
        {
            Console.WriteLine("Error downloading file.");
        }
    }
}
