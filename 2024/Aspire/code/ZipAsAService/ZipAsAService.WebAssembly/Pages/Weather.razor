@page "/weather"
@inject HttpClient Http

@inject WeatherApiClient weatherApiClient
@inject IBlazorDownloadFileService BlazorDownloadFileService;

<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates fetching data from the server.</p>

<button class="btn btn-primary" @onclick="DownloadZippedText">Download zip</button>
<input type="text" @bind="InputValue" />


@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[]? forecasts;

    protected override async Task OnInitializedAsync()
    {
        //forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
        forecasts= await weatherApiClient.GetWeatherAsync();
    }
    private string InputValue { get; set; } = "Hello, World!";

    private async void DownloadZippedText()
    {
        string text = InputValue;

        var zippedBytes = await weatherApiClient.GetZipFile(text);
        System.Console.WriteLine("Number bytes"+zippedBytes.Length);
        if (zippedBytes.Length > 0)
        {
            var fileName = "text.zip";
            await BlazorDownloadFileService.DownloadFileAsync(fileName, zippedBytes);
        }
        else
        {
            Console.WriteLine("Error downloading file.");
        }
    }
    
}
