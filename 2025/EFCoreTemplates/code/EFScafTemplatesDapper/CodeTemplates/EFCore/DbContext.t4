<#@ template hostSpecific="true" #>
<#@ assembly name="Microsoft.EntityFrameworkCore" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Design" #>
<#@ assembly name="Microsoft.EntityFrameworkCore.Relational" #>
<#@ assembly name="Microsoft.Extensions.DependencyInjection.Abstractions" #>
<#@ parameter name="Model" type="Microsoft.EntityFrameworkCore.Metadata.IModel" #>
<#@ parameter name="Options" type="Microsoft.EntityFrameworkCore.Scaffolding.ModelCodeGenerationOptions" #>
<#@ parameter name="NamespaceHint" type="System.String" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="Microsoft.EntityFrameworkCore" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Design" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Infrastructure" #>
<#@ import namespace="Microsoft.EntityFrameworkCore.Scaffolding" #>
<#@ import namespace="Microsoft.Extensions.DependencyInjection" #>
<#
    if (!ProductInfo.GetVersion().StartsWith("9.0"))
    {
        Warning("Your templates were created using an older version of Entity Framework. Additional features and bug fixes may be available. See https://aka.ms/efcore-docs-updating-templates for more information.");
    }

    var services = (IServiceProvider)Host;
    var providerCode = services.GetRequiredService<IProviderConfigurationCodeGenerator>();
    var annotationCodeGenerator = services.GetRequiredService<IAnnotationCodeGenerator>();
    var code = services.GetRequiredService<ICSharpHelper>();

#>
namespace <#= NamespaceHint #>;

public partial class <#= Options.ContextName #> 
{

<#
    foreach (var entityType in Model.GetEntityTypes().Where(e => !e.IsSimpleManyToManyJoinEntityType()))
    {
        var key = entityType.FindPrimaryKey();
        var prop = key.Properties;

        var wherePKCols = "";
        foreach (var property in entityType.GetProperties())
        {
            if (property.IsPrimaryKey())
            {
                if (wherePKCols != "")
                {
                    wherePKCols += " AND ";
                }
                wherePKCols += property.Name + " = @" + property.Name;
            }
        }


        var firstPropertySelect = true;
        var firstPropertyUpdate = true;
        string selectCols = "";
        string updateCols = "";
        foreach (var property in entityType.GetProperties())
        {
            if (!firstPropertySelect)
            {
                selectCols += ", ";
            }
            firstPropertySelect = false;
            selectCols += property.Name;
            if(property.IsPrimaryKey())continue;
            if (!firstPropertyUpdate)
            {
                updateCols += ", ";
            }
            firstPropertyUpdate=false;
            updateCols += property.Name + " = @" + property.Name;
            
        }
#>
    //public virtual DbSet<<#= entityType.Name #>> <#= entityType.GetDbSetName() #> { get; set; }
    public static string <#= entityType.Name #>_SelectAll = "SELECT <#= selectCols #> FROM <#= entityType.Name #>";
    public static string <#= entityType.Name #>_SelectByPK = "SELECT <#= selectCols #> FROM <#= entityType.Name #> WHERE <#=wherePKCols#>";
    public static string <#= entityType.Name #>_DeleteByPK = "DELETE FROM <#= entityType.Name #> WHERE <#=wherePKCols#>";
    public static string <#= entityType.Name #>_UpdateByPK = "UPDATE <#= entityType.Name #> SET <#=updateCols#> WHERE <#=wherePKCols#>";
<#
    }

    foreach (var entityType in Model.GetEntityTypes().Where(e => !e.IsSimpleManyToManyJoinEntityType()))
    {
        foreach (var foreignKey in entityType.GetForeignKeys())
        {
        }
    }

#>
}

