//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using System.Linq;
using OpenTelemetry.Trace;
namespace {{NamespaceName}} {

    [GeneratedCode("AOPMethods", "{{version}}")]
    [CompilerGenerated]
    public partial class {{ClassName}}{


        {{~ for mi in Methods ~}}
        //{{mi.Name}}
            {{

            strAwait = ""
            strAsync =""
            if mi.CouldUseAsync == true
                strAwait = " await "
                strAsync  = " async "
            end
            separator = "" 
            if(mi.NrParameters > 0)
                separator = "," 
            end
            returnString = ""
            if mi.CouldReturnVoidFromAsync == false 
                returnString = " return "
            end
            }}
        public {{strAsync}} {{mi.ReturnType}} {{mi.NewName}} ({{mi.parametersDefinitionCSharp }} ){
            using var activity = ActivityData.AddActivity();
            {
            {{~ for miArg in mi.Parameters  ~}}
                string val{{ miArg.Key }} ;
                try{
                    val{{ miArg.Key }} = System.Text.Json.JsonSerializer.Serialize({{ miArg.Key }});
                }
                catch(Exception ex){
                    val{{ miArg.Key }} = "Error serializing parameter {{ miArg.Key }} : "+ ex.Message;
                }
                span?.SetTag("Argument_{{ miArg.Key }}",val{{ miArg.Key }});
            {{ end}}
             var utcTime =System.DateTime.UtcNow;
             span?.SetTag("UTCDate",utcTime.ToString("yyyyMMddHHmmss"));
             span?.SetTag("LocalDate",System.DateTime.Now.ToString("yyyyMMddHHmmss"));
             span?.SetStatus(Status.Ok);
            try{
                {{returnString}} {{  strAwait }} {{mi.Name}}({{ mi.parametersCallCSharp }});
            }
            catch(Exception ex){
                span?.RecordException(ex);
                span?.SetTag("exceptionMessage",ex.Message);
                span?.SetStatus(Status.Error);
                throw;
            }
            finally{
                span?.Stop();
                var milleElapsed = System.DateTime.UtcNow.Subtract(utcTime).TotalMilliseconds;
                //this.serverTiming.Metrics.Add(new Lib.AspNetCore.ServerTiming.Http.Headers.ServerTimingMetric("{{ClassName}}.{{mi.NewName}}",(decimal)milleElapsed ));
            }


        }//end {{mi.NewName}}
        
        {{ end}}
    }
 }