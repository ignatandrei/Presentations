//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Collections.Generic;
using System.CodeDom.Compiler;
using System.Runtime.CompilerServices;
using System.Diagnostics;
using System.Linq;
using OpenTelemetry.Trace;
namespace {{NamespaceName}} {

    [GeneratedCode("AOPMethods", "{{version}}")]
    [CompilerGenerated]
    public partial class {{ClassName}}{
        {{~ for mi in Methods ~}}
        //{{mi.Name}}
            {{

            strAwait = ""
            strAsync =""
            if mi.CouldUseAsync == true
                strAwait = " await "
                strAsync  = " async "
            end
            separator = "" 
            if(mi.NrParameters > 0)
                separator = "," 
            end
            returnString = ""
            if mi.CouldReturnVoidFromAsync == false 
                returnString = " return "
            end
            }}
        public {{strAsync}} {{mi.ReturnType}} {{mi.NewName}} ({{mi.parametersDefinitionCSharp }}
            {{separator}}  
        [CallerMemberName] string memberName = "",
        [CallerFilePath] string sourceFilePath = "",
        [CallerLineNumber] int sourceLineNumber = 0){
            Console.WriteLine("{{mi.NewName}}");
            //var sw=Stopwatch.StartNew();
            var activitySource = Activity.Current?.Source;
            using var newAct = activitySource?.StartActivity(NameAss +":{{mi.NewName}}");
             if(newAct?.Parent !=null)
                newAct.Parent.AddEvent(new ActivityEvent("{{mi.NewName}}"));

             newAct?.AddTag("method","{{mi.NewName}}");
             newAct?.AddTag("called from ",memberName);
             newAct?.AddTag("called from file",sourceFilePath);
             newAct?.AddTag("called from line",sourceLineNumber);
             var utcTime =System.DateTime.UtcNow;
             newAct?.AddTag("UTCDateStart",utcTime.ToString("yyyyMMdd:HHmmss"));
             var user = ((System.Security.Claims.ClaimsPrincipal)System.Threading.Thread.CurrentPrincipal)?.Claims?.FirstOrDefault()?.Value;
             user ??= "NoUserConfigured";
             newAct?.AddTag("user",user);
             newAct?.AddEvent(new ActivityEvent("START {{mi.NewName}}"));
             newAct?.SetStatus(Status.Ok);
            try{ //original method
                {{returnString}} {{  strAwait }} {{mi.Name}}({{ mi.parametersCallCSharp }});
                
            }
            catch(Exception ex){
                newAct?.RecordException(ex);
                newAct?.AddEvent(new ActivityEvent("Error {{mi.NewName}}"));
                newAct?.SetStatus(Status.Error);
                //Serilog.Log.Error(ex, $"error in {{mi.NewName}} called from {memberName} , file {sourceLineNumber}, line {sourceLineNumber}" + ex.Message);
                throw;
            }
            finally{
                //Serilog.Log.Information($"EndMethod {{mi.NewName}} in {sw.Elapsed.TotalMilliseconds} ");   
                utcTime =System.DateTime.UtcNow;
                newAct?.AddTag("UTCDateEnd",utcTime.ToString("yyyyMMdd:HHmmss"));  
                newAct?.AddEvent(new ActivityEvent("END {{mi.NewName}}"));

            }


        }//end {{mi.NewName}}
        
        {{ end}}
    }
 }